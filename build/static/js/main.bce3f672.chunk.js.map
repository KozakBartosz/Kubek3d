{"version":3,"sources":["3d/lib/Environment.jsx","3d/lib/ModelMaping.jsx","3d/View3d.jsx","canvas/Rectangle.jsx","Editor.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["THREE","require","OrbitControls","Environment","place","canvas","parameters","container","this","scene","Scene","console","log","width","clientWidth","height","clientHeight","createRenderer","createCamera","createOrbit","createLights","window","addEventListener","windowResize","renderer","WebGLRenderer","antialias","alpha","preserveDrawingBuffer","camera","lookAt","Vector3","aspect","setPixelRatio","devicePixelRatio","setSize","fullWidth","fullHeight","setViewOffset","center","updateProjectionMatrix","PerspectiveCamera","position","set","fog","Fog","add","setCameraSettings","light","DirectionalLight","theta","Math","PI","phi","x","distance","cos","y","sin","z","lightAmbient","AmbientLight","lightBack","PointLight","controlsEl","controls","enableKeys","autoRotate","enableZoom","rotate","maxPolarAngle","minPolarAngle","target","hpoint","minDistance","maxDistance","enableDamping","dampingFactor","screenSpacePanning","rotateSpeed","panSpeed","autoRotateSpeed","cameraDist","distanceTo","update","render","OBJLoader","ModelLoader","modelMaping","environment","materials","url","loadingElement","primeryModel","modelUrl","textureLoader","TextureLoader","CubeTextureLoader","loading","setModel","state","classList","remove","loadModel","then","model","Promise","resolve","reject","setLoading","load","object","children","material","white1","white2","xhr","loaded","total","error","map","loadTexture","View3d","textureUrl","useRef","canvasContainer","canvasContainerLoading","useState","curentModel","setCurentModel","useEffect","shadow","MeshBasicMaterial","color","transparent","opacity","lerp","MeshPhongMaterial","shininess","reflectivity","current","myModel","setTexture","animation","requestAnimationFrame","className","style","ref","Rectangle","layer","isSelected","onSelect","onChange","imgRef","rectRef","trRef","nodes","getLayer","batchDraw","useImage","image","onClick","onTap","onDragEnd","e","onTransformEnd","selector","enabled","draggable","boundBoxFunc","oldBox","newBox","Editor","initialLayers","bgUrl","stageRef","setTextureUrl","rectangles","setRectangles","selectedMode","setSelectedMode","uri","toDataURL","onMouseDown","onTouchStart","border","margin","maxWidth","rect","i","newAttrs","rects","slice","name","initialLayers2","App","startDate","setStartDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bce3f672.chunk.js","sourcesContent":["const THREE = require('three');\nconst OrbitControls = require('three-orbitcontrols');\n\nexport default class Environment {\n    constructor(place, canvas, parameters) {\n        const container = place;\n        this.scene = new THREE.Scene();\n\n        console.log(container);\n        this.parameters = parameters;\n        this.canvas = canvas;\n        this.width = container.clientWidth;\n        this.height = container.clientHeight;\n        this.container = container;\n        this.createRenderer();\n        this.createCamera();\n        this.createOrbit();\n        this.createLights();\n        window.addEventListener('resize', () => this.windowResize(), false);\n    }\n    createRenderer() {\n        const renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: true,\n            alpha: true,\n            preserveDrawingBuffer: true\n        });\n        this.renderer = renderer;\n    }\n\n    setCameraSettings() {\n        let { camera, width, height, parameters, renderer } = this;\n\n        camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n        camera.aspect = width / height;\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(width, height);\n\n        let fullWidth = width * 2;\n        let fullHeight = height * 1;\n\n        camera.setViewOffset(\n            fullWidth,\n            fullHeight,\n            width * (width >= 900 ? parameters.center : 0.5),\n            height * 0,\n            width,\n            height\n        );\n\n        camera.updateProjectionMatrix();\n    }\n\n    createCamera() {\n        let { scene, width, height, parameters } = this;\n\n        const camera = new THREE.PerspectiveCamera(26, width / height, 1, 3500);\n        camera.position.set(3, 2, -2);\n\n        scene.fog = new THREE.Fog(0xffffff, 1300, 1500);\n\n        this.scene.add(camera);\n        this.camera = camera;\n\n        this.setCameraSettings();\n    }\n    windowResize() {\n        console.log('windowResize', this);\n\n        this.width = this.container.clientWidth;\n        this.height = this.container.clientHeight;\n\n        let { camera, width, height, parameters } = this;\n\n        this.setCameraSettings();\n    }\n    createLights() {\n        let { scene, parameters } = this;\n        const light = new THREE.DirectionalLight(0xffffff, 0.4);\n\n        let theta = Math.PI * (0.26 - 0.5);\n        let phi = 2 * Math.PI * (0.205 - 0.5);\n        light.position.x = -parameters.distance * Math.cos(phi * 2);\n        // light.position.y = parameters.distance * Math.sin(phi) * Math.sin(theta);\n        light.position.y = parameters.distance * Math.sin(phi) * Math.sin(theta);\n        light.position.z = parameters.distance * Math.sin(phi) * Math.cos(theta);\n        this.light = light;\n        scene.add(light);\n\n        const lightAmbient = new THREE.AmbientLight(0xffffff, 0.6); // soft white light\n        scene.add(lightAmbient);\n        this.lightAmbient = lightAmbient;\n\n        const lightBack = new THREE.PointLight(0xffffff, 0.45);\n        lightBack.position.x = parameters.distance * Math.cos(phi * 2);\n        lightBack.position.y = (parameters.distance * Math.sin(phi) * Math.sin(theta)) / 2;\n        lightBack.position.z = -parameters.distance * Math.sin(phi) * Math.cos(theta);\n        this.lightBack = lightBack;\n        scene.add(lightBack);\n    }\n    createOrbit() {\n        const controlsEl = this.container;\n        const controls = new OrbitControls(this.camera, controlsEl);\n        window.controls = controls;\n\n        controlsEl.addEventListener('focus', () => {\n            // console.log('controls: ', controls);\n            this.controls.enableKeys = true;\n            this.controls.autoRotate = false;\n            this.controls.enableZoom = true;\n        });\n        controlsEl.addEventListener('blur', () => {\n            // console.log('controls: ', controls);\n            this.controls.enableKeys = false;\n            this.controls.enableZoom = false;\n            this.controls.autoRotate = this.parameters.rotate;\n        });\n        controls.maxPolarAngle = Math.PI * 0.8;\n        controls.minPolarAngle = Math.PI * 0.1;\n        controls.enableKeys = false;\n        controls.enableZoom = false;\n        controls.target.set(0, this.parameters.hpoint, 0);\n        controls.minDistance = 1.0;\n        controls.maxDistance = 300.0;\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.1;\n        controls.screenSpacePanning = true;\n        controls.rotateSpeed = 0.5;\n        controls.panSpeed = 1;\n        controls.autoRotate = this.parameters.rotate;\n        // controls.autoRotateSpeed = 0.05;\n        controls.autoRotateSpeed = 0.8;\n\n        this.controls = controls;\n        this.controlsEl = controlsEl;\n    }\n\n    render() {\n        // console.log(\"lol\")\n\n        const { renderer, scene, camera, controls } = this;\n        var cameraDist = this.camera.position.distanceTo(controls.target) + 20;\n        scene.fog = new THREE.Fog(0xffffff, cameraDist, cameraDist * 2.8);\n        controls.update();\n        renderer.render(scene, camera);\n\n        // requestAnimationFrame(() => this.render());\n    }\n}\n","/* eslint-disable */\n\nconst THREE = require('three');\n\nconst OBJLoader = require('three-obj-loader');\nOBJLoader(THREE);\n\nconst ModelLoader = new THREE.OBJLoader();\n\nexport default class modelMaping {\n    constructor(environment, materials, url, loadingElement) {\n        this.primeryModel = {};\n        this.environment = environment;\n        this.scene = environment.scene;\n        this.loadingElement = loadingElement;\n        this.materials = materials;\n        this.modelUrl = url;\n\n        this.textureLoader = new THREE.TextureLoader();\n        this.CubeTextureLoader = new THREE.CubeTextureLoader();\n\n        this.loading = true;\n\n        if (url) this.setModel(url);\n    }\n    setLoading(state) {\n        this.loading = state;\n        if (this.loadingElement) {\n            state\n                ? this.loadingElement.classList.add('canvasContainer-loading--active')\n                : this.loadingElement.classList.remove('canvasContainer-loading--active');\n        }\n    }\n    setModel(url) {\n        const { scene } = this;\n        console.log(scene);\n        if (this.primeryModel) {\n            scene.remove(this.primeryModel);\n        }\n        this.loadModel(url).then((model) => {\n            this.primeryModel = model;\n            scene.add(model);\n        });\n    }\n    loadModel(url) {\n        const { materials } = this;\n        return new Promise((resolve, reject) => {\n            this.setLoading(true);\n            ModelLoader.load(\n                url,\n                (object) => {\n                    console.log('loadModel', object.children);\n                    // object.children.material = [materials.test1, materials.test2];\n                    object.children[0].material = materials.white1;\n                    object.children[1].material = materials.white2;\n                    this.setLoading(false);\n                    resolve(object);\n                },\n                (xhr) => {\n                    console.log((xhr.loaded / xhr.total) * 100 + '%');\n                    if (xhr.loaded / xhr.total == 1) this.setLoading(true);\n                },\n                (error) => {\n                    // console.log('An error happened');\n                    this.setLoading(false);\n                    reject();\n                }\n            );\n        });\n    }\n    setTexture(url) {\n        const { materials } = this;\n        if (url) {\n            materials.white1.map = this.loadTexture(url);\n        } else {\n            materials.white1.map = false;\n        }\n    }\n    loadTexture(url) {\n        this.setLoading(true);\n        return this.textureLoader.load(\n            url,\n            (object) => {\n                this.setLoading(false);\n            },\n            (object) => {\n                this.setLoading(false);\n            }\n        );\n    }\n}\n","import { useEffect, useRef, useState } from 'react';\nimport Environment from './lib/Environment';\nimport modelMaping from './lib/ModelMaping';\n\nvar THREE = require('three');\n// const Stats = require('stats-js');\n\nexport default function View3d({ textureUrl, modelUrl }) {\n    const canvas = useRef(null);\n    const canvasContainer = useRef(null);\n    const canvasContainerLoading = useRef(null);\n\n    const [curentModel, setCurentModel] = useState(null);\n\n    useEffect(() => {\n        console.log('THREE', THREE);\n        const materials = {\n            shadow: new THREE.MeshBasicMaterial({\n                color: '0x000000',\n                // alphaMap: textureShadow,\n                transparent: true,\n                // depthWrite: false,\n                opacity: THREE.Math.lerp(1, 0.25, 0.5)\n            }),\n            white1: new THREE.MeshPhongMaterial({\n                color: 0xffffff,\n                shininess: 500,\n                reflectivity: 0.8\n            }),\n            white2: new THREE.MeshPhongMaterial({\n                color: 0xffffff,\n                shininess: 500,\n                reflectivity: 0.8\n            })\n        };\n\n        const parameters = {\n            distance: 400,\n            hpoint: 0,\n            rotate: true,\n            center: 0.5\n        };\n\n        const environment = new Environment(canvasContainer.current, canvas.current, parameters);\n        const myModel = new modelMaping(environment, materials, modelUrl, canvasContainerLoading.current);\n\n        setCurentModel(myModel);\n\n        myModel.setTexture('/assets/textures/UV_Grid_Sm.jpg');\n\n        const animation = () => {\n            if (!myModel.loading) {\n                environment.render();\n            }\n            requestAnimationFrame(animation);\n        };\n        animation();\n    }, []);\n\n    useEffect(() => {\n        if (!textureUrl) return;\n        curentModel.setTexture(textureUrl);\n    }, [textureUrl]);\n\n    return (\n        <div className=\"canvasContainer\" style={{ height: '600px' }} ref={canvasContainer}>\n            <canvas ref={canvas} />\n            <div className=\"canvasContainer-loading canvasContainer-loading--active\" ref={canvasContainerLoading}></div>\n        </div>\n    );\n}\n","import { Rect, Transformer, Image } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nimport useImage from 'use-image';\nimport { Portal } from 'react-konva-utils';\n\nexport const Rectangle = ({ layer, isSelected, onSelect, onChange }) => {\n    const imgRef = useRef();\n    const rectRef = useRef();\n    const trRef = useRef();\n    console.log(layer);\n\n    useEffect(() => {\n        if (isSelected) {\n            // we need to attach transformer manually\n            trRef.current.nodes([imgRef.current, rectRef.current]);\n            trRef.current.getLayer().batchDraw();\n        }\n    }, [isSelected]);\n\n    const [image] = useImage(layer.url);\n\n    return (\n        <>\n            <Image\n                image={image}\n                onClick={onSelect}\n                onTap={onSelect}\n                ref={imgRef}\n                x={layer.x}\n                y={layer.y}\n                width={layer.width}\n                height={layer.height}\n                onDragEnd={(e) => {\n                    onChange({\n                        ...layer,\n                        x: e.target.x(),\n                        y: e.target.y()\n                    });\n                }}\n                onTransformEnd={(e) => {\n                    onChange({\n                        ...layer,\n                        x: e.target.x(),\n                        y: e.target.y()\n                    });\n                }}\n\n                // onTransformEnd={(e) => {\n                //     // transformer is changing scale of the node\n                //     // and NOT its width or height\n                //     // but in the store we have only width and height\n                //     // to match the data better we will reset scale on transform end\n                //     const node = imgRef.current;\n\n                //     const scaleX = node.scaleX();\n                //     const scaleY = node.scaleY();\n\n                //     const crop = getCrop(node.image(), {\n                //         width: node.width() * scaleX,\n                //         height: node.height() * scaleY\n                //     });\n                //     // console.log(crop);\n                //     onChange({\n                //         // ...crop,\n                //         ...layer,\n                //         x: node.x(),\n                //         y: node.y(),\n                //         // set minimal value\n                //         width: Math.max(5, node.width() * scaleX),\n                //         height: Math.max(node.height() * scaleY)\n                //     });\n                //     node.scaleX(1);\n                //     node.scaleY(1);\n                // }}\n            />\n            {isSelected && (\n                <Portal selector=\".top-layer\" enabled>\n                    <Rect\n                        x={layer.x}\n                        y={layer.y}\n                        width={layer.width}\n                        height={layer.height}\n                        draggable\n                        ref={rectRef}\n                    ></Rect>\n                    <Transformer\n                        ref={trRef}\n                        boundBoxFunc={(oldBox, newBox) => {\n                            // limit resize\n                            if (newBox.width < 10 || newBox.height < 10) {\n                                return oldBox;\n                            }\n                            return newBox;\n                        }}\n                    />\n                </Portal>\n            )}\n        </>\n    );\n};\n\n// function getCrop(image, size, clipPosition = 'center-middle') {\n//     const width = size.width;\n//     const height = size.height;\n//     const aspectRatio = width / height;\n\n//     let newWidth;\n//     let newHeight;\n\n//     const imageRatio = image.width / image.height;\n\n//     if (aspectRatio >= imageRatio) {\n//         newWidth = image.width;\n//         newHeight = image.width / aspectRatio;\n//     } else {\n//         newWidth = image.height * aspectRatio;\n//         newHeight = image.height;\n//     }\n\n//     let x = 0;\n//     let y = 0;\n//     if (clipPosition === 'left-top') {\n//         x = 0;\n//         y = 0;\n//     } else if (clipPosition === 'left-middle') {\n//         x = 0;\n//         y = (image.height - newHeight) / 2;\n//     } else if (clipPosition === 'left-bottom') {\n//         x = 0;\n//         y = image.height - newHeight;\n//     } else if (clipPosition === 'center-top') {\n//         x = (image.width - newWidth) / 2;\n//         y = 0;\n//     } else if (clipPosition === 'center-middle') {\n//         x = (image.width - newWidth) / 2;\n//         y = (image.height - newHeight) / 2;\n//     } else if (clipPosition === 'center-bottom') {\n//         x = (image.width - newWidth) / 2;\n//         y = image.height - newHeight;\n//     } else if (clipPosition === 'right-top') {\n//         x = image.width - newWidth;\n//         y = 0;\n//     } else if (clipPosition === 'right-middle') {\n//         x = image.width - newWidth;\n//         y = (image.height - newHeight) / 2;\n//     } else if (clipPosition === 'right-bottom') {\n//         x = image.width - newWidth;\n//         y = image.height - newHeight;\n//     } else if (clipPosition === 'scale') {\n//         x = 0;\n//         y = 0;\n//         newWidth = width;\n//         newHeight = height;\n//     } else {\n//         console.error(new Error('Unknown clip position property - ' + clipPosition));\n//     }\n\n//     return {\n//         cropX: x,\n//         cropY: y,\n//         cropWidth: newWidth,\n//         cropHeight: newHeight\n//     };\n// }\n","import { useRef, useState, useEffect } from 'react';\nimport { Image, Layer, Stage } from 'react-konva';\nimport useImage from 'use-image';\nimport View3d from './3d/View3d';\nimport { Rectangle } from './canvas/Rectangle';\n\nexport default function Editor({ initialLayers, bgUrl, modelUrl }) {\n    const stageRef = useRef(null);\n\n    const [textureUrl, setTextureUrl] = useState(null);\n\n    const [rectangles, setRectangles] = useState(initialLayers);\n    const [selectedMode, setSelectedMode] = useState(true);\n\n    const [image] = useImage(bgUrl);\n\n    useEffect(() => {\n        setRectangles(initialLayers);\n    }, [initialLayers]);\n\n    return (\n        <>\n            <button\n                onClick={() => {\n                    const uri = stageRef.current.toDataURL();\n                    setTextureUrl(uri);\n                }}\n            >\n                Zapisz\n            </button>\n\n            <View3d textureUrl={textureUrl} modelUrl={modelUrl} />\n\n            <Stage\n                width={1025}\n                height={308}\n                onMouseDown={() => setSelectedMode(true)}\n                onTouchStart={() => setSelectedMode(true)}\n                style={{ border: '5px solid #ccc', margin: '10px auto', width: '100%', maxWidth: 1025 }}\n            >\n                <Layer ref={stageRef}>\n                    {rectangles.map((rect, i) => {\n                        return (\n                            <Rectangle\n                                key={i}\n                                layer={rect}\n                                isSelected={selectedMode}\n                                onChange={(newAttrs) => {\n                                    const rects = rectangles.slice();\n                                    rects[i] = newAttrs;\n                                    setRectangles(rects);\n                                    const uri = stageRef.current.toDataURL();\n                                    setTextureUrl(uri);\n                                }}\n                            />\n                        );\n                    })}\n                    <Image image={image} width={1025} height={308} />\n                </Layer>\n                <Layer name=\"top-layer\" />\n            </Stage>\n        </>\n    );\n}\n","import Editor from './Editor'\nimport { useState } from 'react'\n\nconst initialLayers = [\n    {\n        x: 80,\n        y: 90,\n        width: 250,\n        height: 120,\n        url: '/assets/textures/kosak2222.png',\n    },\n    {\n        x: 600,\n        y: 55,\n        width: 300,\n        height: 220,\n        url: '/assets/textures/big.jpg',\n    },\n]\n\nconst initialLayers2 = [\n    {\n        x: 80,\n        y: 55,\n        width: 900,\n        height: 220,\n        url: '/assets/textures/pattern.jpeg',\n    },\n]\nfunction App() {\n    const [startDate, setStartDate] = useState(initialLayers)\n    return (\n        <div className=\"App\">\n            <button\n                onClick={() => {\n                    startDate === initialLayers\n                        ? setStartDate(initialLayers2)\n                        : setStartDate(initialLayers)\n                }}\n            >\n                Zmien\n            </button>\n            <Editor\n                initialLayers={startDate}\n                bgUrl=\"./assets/textures/UV_Grid_Sm.alpha.png\"\n                modelUrl=\"assets/kubek4.obj\"\n            />\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}